npm Parcel <-- js bundleris.  conpressing project for final version



npm babel <-- convert es6 projecty to older versions


import regenerator-runtime/runtime  <- polyfilling async await
import core-js/stable               <- polyfilling everything else

------------------------------------------------------------------

object is a colection of name value pairs

execution context -wrapina parasyta koda i globalu objekta(window) = this(window{...}), 
execution context jame yra vykdomas kodas

kintamieji kurie nepatalpinami funkcijoje priskiriami gloabaliam(window) objektui

hoisting -- atmintyje sukuriamos vietos kintamiesiams(su reiksme undefined) pries execution phase, in creation phase. 

single threaded: one command at the time (synchronous) execution

invocation - running a function

kaskart po funkcijos iskvietimo(invoking) sukuriamas naujas execution context ir funkcija uzkeliama i call stack virsu.
every execution context has its own variable envirament

scope - is where a variable is available in code

primitive variable type means tha it has only one value


a=b=c=0  -asociating from right to left. returning value not the reference

a< b< c from left to right

coercion - converting one value to another

expression - a unit of code that results in a value

function fncName(){}   <-- function statement
let fncName = function(){}  <-- function expression


function names(name1, name2, ...other) {
console.log(others)

}

names('jonas', 'petras', 'dovydas', 'saulius') //dovydas, saulius

immediately Invoked Function Expression (IIFE)
let name = function(nn){
    return 'vardas'+nn;
}()

immediately Invoked Function Expression (IIFE)
(function(name){
    console.log(name)
}('John'))

console.log(name('tomas')) // expression 
function currying <-- creating a copy of a function but with some present elements
functionName.bind(object, arg1, arg2) returns new function with attached 'this' to an argument. arguments then are permanently joined with newly created function

functionName.call(object, arg1, arg2) invokes-executes function by pointing 'this' o given object

functionName.call(object, [arg1, arg2]) same as '.call' except it takes arguments in array

underscore.js and lodash.com <-- open source websites, functions and for better understanding functional programming

reflection word - an objeckt can look at itself, listing and changing its properties and methods

.hasOwnProperty checks if an object has own property, __proto__ not included

function constructors are a function helping to create objects

function Person(firstName, lastName) {
    this.firstName = firstName,
    this.lastName = lastName
}
var john = new Person() , new operator creates new empty object, Person() invokes a function. this points to newly created object. If there is no return word then it return the whole object

Person.prototype.getFullName = function() {
    return this.lastName + ' ' + this.firstName
}

console.log(john.getFullName)

momentsjs.com parse, validate, manipulate and display dates in JavaScript


let person = {
    firstName: 'Default',
    lastName: 'Default',
    greet: function() {
        return 'Hi' + ' ' + this.firstName;
    }
}
let john = Object.create(person) creates empty object with prototype of person  (new way)
john.firstName = 'John'  overiding person prototype

console.log(john instanceof Person) check if john is instance of Person


visa 3/ iskyrus neziureti,   tada 5typescrip,  tada 4 react ir gryzt i 3 pabaigt

Transpile word- convert the syntax of one programming language to another. TypeScript(madeb by Miscrosoft) ir processed by 'transpilers' and converted to Javascript language

Thenable word- an object that has  a 'then' function

-------------------------------------------------------------------------------------
TypeScript

tsc index.ts  <- to compile

ts-node <- used to compile typescript and run generated js


type annotations word - code we add to tell Typescript what type of value  a variable has (manual ), always for a functions
type inference word <- typescript tries to figure out what type of value a variable refers to (auto), almost always for variablebles

when you use a variable declaration and initialization then typescript find a type by itself(type inference)