npm Parcel <-- js bundleris.  conpressing project for final version



npm babel <-- convert es6 projecty to older versions


import regenerator-runtime/runtime  <- polyfilling async await
import core-js/stable               <- polyfilling everything else

------------------------------------------------------------------

object is a colection of name value pairs

execution context -wrapina parasyta koda i globalu objekta(window) = this(window{...}), 
execution context jame yra vykdomas kodas

kintamieji kurie nepatalpinami funkcijoje priskiriami gloabaliam(window) objektui

hoisting -- atmintyje sukuriamos vietos kintamiesiams(su reiksme undefined) pries execution phase, in creation phase. 

single threaded: one command at the time (synchronous) execution

invocation - running a function

kaskart po funkcijos iskvietimo(invoking) sukuriamas naujas execution context ir funkcija uzkeliama i call stack virsu.
every execution context has its own variable envirament

scope - is where a variable is available in code

primitive variable type means tha it has only one value


a=b=c=0  -asociating from right to left. returning value not the reference

a< b< c from left to right

coercion - converting one value to another

expression - a unit of code that results in a value

function fncName(){}   <-- function statement
let fncName = function(){}  <-- function expression


function names(name1, name2, ...other) {
console.log(others)

}

names('jonas', 'petras', 'dovydas', 'saulius') //dovydas, saulius

immediately Invoked Function Expression (IIFE)
let name = function(nn){
    return 'vardas'+nn;
}()

immediately Invoked Function Expression (IIFE)
(function(name){
    console.log(name)
}('John'))

console.log(name('tomas')) // expression 
function currying <-- creating a copy of a function but with some present elements
functionName.bind(object, arg1, arg2) returns new function with attached 'this' to an argument. arguments then are permanently joined with newly created function

functionName.call(object, arg1, arg2) invokes-executes function by pointing 'this' o given object

functionName.call(object, [arg1, arg2]) same as '.call' except it takes arguments in array